{"version":3,"sources":["types.js","MakeColumns.js","ExcelReader.js","index.js"],"names":["map","x","join","make_cols","refstr","o","C","XLSX","utils","decode_range","e","c","i","name","encode_col","key","ExcelReader","props","state","file","data","cols","handleFile","bind","handleChange","files","target","this","setState","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","wsname","SheetNames","ws","Sheets","sheet_to_json","console","log","JSON","stringify","readAsArrayBuffer","className","htmlFor","id","accept","SheetJSFT","onChange","value","onClick","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oGAAkB,CACjB,OAAQ,OAAQ,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAC1IA,KAAI,SAASC,GAAK,MAAO,IAAMA,KAAMC,KAAK,M,6LCA/BC,EAAY,SAAAC,GAExB,IADA,IAAIC,EAAI,GAAIC,EAAIC,IAAKC,MAAMC,aAAaL,GAAQM,EAAEC,EAAI,EAC9CC,EAAI,EAAGA,EAAIN,IAAKM,EAAGP,EAAEO,GAAK,CAACC,KAAKN,IAAKC,MAAMM,WAAWF,GAAIG,IAAIH,GACtE,OAAOP,G,uBCqEOW,E,kDA/Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,KAAM,GACNC,KAAM,IAER,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,E,gDAWnB,SAAab,GACX,IAAMe,EAAQf,EAAEgB,OAAOD,MACnBA,GAASA,EAAM,IAAIE,KAAKC,SAAS,CAAET,KAAMM,EAAM,O,wBAGrD,WAAc,IAAD,OAELI,EAAS,IAAIC,WACbC,IAASF,EAAOG,mBAEtBH,EAAOI,OAAS,SAACvB,GAEf,IAAMwB,EAAOxB,EAAEgB,OAAOS,OAChBC,EAAK7B,IAAK8B,KAAKH,EAAM,CAAEI,KAAMP,EAAO,SAAW,QAASQ,SAAU,IAElEC,EAASJ,EAAGK,WAAW,GACvBC,EAAKN,EAAGO,OAAOH,GAEfpB,EAAOb,IAAKC,MAAMoC,cAAcF,GAEtC,EAAKd,SAAS,CAAER,KAAMA,EAAMC,KAAMlB,EAAUuC,EAAG,WAAY,WAC1DG,QAAQC,IAAIC,KAAKC,UAAU,EAAK9B,MAAME,KAAM,KAAM,QAKjDW,EACFF,EAAOG,mBAAmBL,KAAKT,MAAMC,MAErCU,EAAOoB,kBAAkBtB,KAAKT,MAAMC,Q,oBAKxC,WACE,OACE,qBAAK+B,UAAU,UAAf,SACE,sBAAKA,UAAU,gBAAf,UACA,uBAAOC,QAAQ,OAAf,iDACA,uBACA,uBAAOb,KAAK,OAAOY,UAAU,eAAeE,GAAG,OAAOC,OAAQC,YAAWC,SAAU5B,KAAKH,eACxF,uBACA,uBAAOc,KAAK,SACVkB,MAAM,8BACNC,QAAS9B,KAAKL,WAAa4B,UAAU,2B,GAxDrBQ,aCJ1BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,U","file":"static/js/main.e84de87c.chunk.js","sourcesContent":["const SheetJSFT = [\r\n\t\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"\r\n].map(function(x) { return \".\" + x; }).join(\",\");\r\n\r\n","import XLSX from 'xlsx';\r\n/* generate an array of column objects */\r\nexport const make_cols = refstr => {\r\n\tlet o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\r\n\tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\r\n\treturn o;\r\n};","import React, { Component } from 'react';\r\nimport { Fabric } from '@fluentui/react/lib/Fabric';\r\nimport { DefaultButton } from '@fluentui/react/lib/Button';\r\nimport XLSX from 'xlsx';\r\nimport { make_cols } from './MakeColumns';\r\nimport {SheetJSFT} from './types';\r\nimport './index.css';\r\n\r\n\r\n\r\nclass ExcelReader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      file: {},\r\n      data: [],\r\n      cols: []\r\n    }\r\n    this.handleFile = this.handleFile.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n \r\n  handleChange(e) {\r\n    const files = e.target.files;\r\n    if (files && files[0]) this.setState({ file: files[0] });\r\n  };\r\n \r\n  handleFile() {\r\n    /* Boilerplate to set up FileReader */\r\n    const reader = new FileReader();\r\n    const rABS = !!reader.readAsBinaryString;\r\n \r\n    reader.onload = (e) => {\r\n      /* Parse data */\r\n      const bstr = e.target.result;\r\n      const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA : true });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      const data = XLSX.utils.sheet_to_json(ws);\r\n      /* Update state */\r\n      this.setState({ data: data, cols: make_cols(ws['!ref']) }, () => {\r\n       console.log(JSON.stringify(this.state.data, null, 2),);\r\n      });\r\n     \r\n    };\r\n \r\n    if (rABS) {\r\n      reader.readAsBinaryString(this.state.file);\r\n    } else {\r\n      reader.readAsArrayBuffer(this.state.file);\r\n    };\r\n    \r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"inner-wrapper\">\r\n        <label htmlFor=\"file\">Upload an excel to Process Triggers</label>\r\n        <br />\r\n        <input type=\"file\" className=\"form-control\" id=\"file\" accept={SheetJSFT} onChange={this.handleChange} />\r\n        <br />\r\n        <input type='submit' \r\n          value=\"Press and check the console\"\r\n          onClick={this.handleFile}  className=\"submit-button\"/>\r\n        </div>\r\n    </div>\r\n    )\r\n  }\r\n  \r\n}\r\n \r\nexport default ExcelReader;","import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport ExcelReader from './ExcelReader';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ExcelReader></ExcelReader>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}